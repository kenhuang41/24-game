import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;

// version 3: returns all final step of solutions (no duplicates but may not account for order of adding/subtracting)
public class test24part4 {

    // value to solve for
    private static final int SOL = 163;

    // values to work with
    private double[] vals;

    // expressions to work with
    private String[] exps;

    // hashset of final steps (aka solutions)
    private HashSet<String> solutions;

    // constructs object (pardon the lack of camelCase hehe)
    public test24part4(Iterable<Double> input) {
        vals = new double[((Collection<Double>) input).size()];
        exps = new String[vals.length];
        int i = 0;
        for (Double d : input) {
            vals[i] = d;
            exps[i++] = "" + d;
        }
        solutions = new HashSet<String>();
        solve(vals, exps, vals.length);
    }

    // recursive method to populate solutions hashset
    private boolean solve(double[] inputValues, String[] inputExpressions, int numVals) {

        if (numVals == 1 && inputValues[0] == SOL)
            solutions.add(inputExpressions[0]);
        double[] numbers = inputValues.clone();
        String[] strings = inputExpressions.clone();
        double[] nums;
        String[] strs;

//        System.out.println(Arrays.toString(numbers) + " " + Arrays.toString(strings));

        boolean output = false;
        for (int i = 0; i < numVals - 1; i++) {
            for (int j = i + 1; j < numVals; j++) {
                nums = numbers.clone();
                strs = strings.clone();
                double a = nums[i];
                double b = nums[j];
                String aString = strs[i];
                String bString = strs[j];
                nums[i] = Math.PI;
                nums[j] = Math.PI;
                strs[i] = "";
                strs[j] = "";
                clean(nums);
                clean(strs);

                nums[numVals - 2] = a + b;
                strs[numVals - 2] = "(" + aString + " + " + bString + ")";
                if (solve(nums, strs, numVals - 1)) output = true;
                nums[numVals - 2] = Math.PI;
                strs[numVals - 2] = "";

                nums[numVals - 2] = Math.abs(a - b);
                if (a >= b)
                    strs[numVals - 2] = "(" + aString + " - " + bString + ")";
                else
                    strs[numVals - 2] = "(" + bString + " - " + aString + ")";
                if (solve(nums, strs, numVals - 1)) output = true;
                nums[numVals - 2] = Math.PI;
                strs[numVals - 2] = "";

                nums[numVals - 2] = a * b;
                strs[numVals - 2] = "(" + aString + " * " + bString + ")";
                if (solve(nums, strs, numVals - 1)) output = true;
                nums[numVals - 2] = Math.PI;
                strs[numVals - 2] = "";

                if (b != 0) {
                    nums[numVals - 2] = a / b;
                    strs[numVals - 2] = "(" + aString + " / " + bString + ")";
                    if (solve(nums, strs, numVals - 1)) output = true;
                    nums[numVals - 2] = Math.PI;
                    strs[numVals - 2] = "";
                }

                if (a != 0) {
                    nums[numVals - 2] = b / a;
                    strs[numVals - 2] = "(" + bString + " / " + aString + ")";
                    if (solve(nums, strs, numVals - 1)) output = true;
                    nums[numVals - 2] = Math.PI;
                    strs[numVals - 2] = "";
                }
            }
        }

        return output;
    }

    private static void clean(double[] array) {
        int lookingAt = 0;
        for (int i = 0; i < array.length - 1; i++) {
            if (lookingAt >= array.length) break;
            if (array[i] == Math.PI) {
                while (lookingAt < array.length && array[lookingAt] == Math.PI) {
                    lookingAt++;
                }
                if (lookingAt < array.length) {
                    array[i] = array[lookingAt];
                    array[lookingAt] = Math.PI;
                }
            } else
                lookingAt++;
        }
    }

    private static void clean(String[] array) {
        int lookingAt = 0;
        for (int i = 0; i < array.length - 1; i++) {
            if (lookingAt >= array.length) break;
            if (array[i].equals("")) {
                while (lookingAt < array.length && array[lookingAt].equals("")) {
                    lookingAt++;
                }
                if (lookingAt < array.length) {
                    array[i] = array[lookingAt];
                    array[lookingAt] = "";
                }
            } else
                lookingAt++;
        }
    }

    // access solutions
    public HashSet<String> getSolutions() {
        return solutions;
    }

    // main method for testing
    public static void main(String[] args) {

        // instantiates test array and time
        long start = System.nanoTime();
        ArrayList test = new ArrayList<Double>();
        for (String s : args)
            test.add(Double.parseDouble(s));
        System.out.println("Cards: " + test + "\n");

        // instantiates test object and print solutions and time elapsed
        test24part4 testObject = new test24part4(test);
        int numSols = testObject.getSolutions().size();
        switch (numSols) {
            case 0:
                System.out.println("No solution exists.");
                break;
            case 1:
                System.out.println("The following solution exists.");
                break;
            default:
                System.out.println("The following " + numSols + " solutions exists.");
        }

        for (String s : testObject.getSolutions())
            System.out.println(s);

        long finish = System.nanoTime();
        System.out.println("\n(" + (finish - start) / 1.0e6 + " milliseconds elapsed)");
    }

}


//Cards: [2.0, 5.0, 6.0, 7.0, 8.0, 13.0]
//
//        The following 317 solutions exists.
//        (7.0 + (6.0 * (13.0 * ((2.0 * 5.0) - 8.0))))
//        ((13.0 * (2.0 * 7.0)) - (6.0 + (5.0 + 8.0)))
//        ((13.0 * ((5.0 * (8.0 / 2.0)) - 7.0)) - 6.0)
//        ((5.0 * 6.0) + (7.0 * (8.0 + (13.0 - 2.0))))
//        ((5.0 * (7.0 + (2.0 * 13.0))) - (8.0 - 6.0))
//        (7.0 + (6.0 * (13.0 * ((2.0 + 8.0) / 5.0))))
//        (((7.0 * (2.0 * 13.0)) - 8.0) - (5.0 + 6.0))
//        ((7.0 * (2.0 * 13.0)) - (6.0 + (5.0 + 8.0)))
//        ((8.0 * ((2.0 * 7.0) + (13.0 - 6.0))) - 5.0)
//        (7.0 + ((2.0 * 6.0) + (8.0 * (5.0 + 13.0))))
//        (((2.0 * (13.0 - 7.0)) * (6.0 + 8.0)) - 5.0)
//        ((((2.0 * (7.0 * 13.0)) - 6.0) - 8.0) - 5.0)
//        ((5.0 * (7.0 + (2.0 + 8.0))) + (6.0 * 13.0))
//        ((7.0 * (8.0 + (13.0 - 2.0))) + (5.0 * 6.0))
//        (((5.0 + 13.0) * (8.0 + (7.0 / 6.0))) - 2.0)
//        ((7.0 * ((13.0 * (8.0 - 6.0)) - 2.0)) - 5.0)
//        (7.0 + ((6.0 / 5.0) * (13.0 * (2.0 + 8.0))))
//        ((8.0 * ((13.0 - 6.0) + (2.0 * 7.0))) - 5.0)
//        (((2.0 + 6.0) * (7.0 + 13.0)) + (8.0 - 5.0))
//        ((8.0 * (13.0 + (6.0 / 2.0))) + (5.0 * 7.0))
//        ((5.0 * 8.0) + (6.0 + (13.0 * (2.0 + 7.0))))
//        ((7.0 * (13.0 + (8.0 + (6.0 / 2.0)))) - 5.0)
//        ((((13.0 * (2.0 * 7.0)) - 5.0) - 8.0) - 6.0)
//        (((2.0 * (7.0 * 13.0)) - 6.0) - (5.0 + 8.0))
//        (7.0 + (6.0 * ((13.0 / 5.0) * (2.0 + 8.0))))
//        (((2.0 * 6.0) + (7.0 / 13.0)) * (5.0 + 8.0))
//        ((5.0 * (2.0 + (7.0 + 8.0))) + (6.0 * 13.0))
//        (7.0 + (13.0 * ((6.0 * (2.0 + 8.0)) / 5.0)))
//        ((13.0 * ((7.0 * (5.0 - 2.0)) - 8.0)) - 6.0)
//        (13.0 + (6.0 * ((5.0 * 7.0) - (2.0 + 8.0))))
//        (6.0 + ((5.0 * (7.0 + (2.0 * 13.0))) - 8.0))
//        ((8.0 * (7.0 + 13.0)) + (2.0 + (6.0 - 5.0)))
//        ((6.0 * (5.0 * 8.0)) - (7.0 * (13.0 - 2.0)))
//        (7.0 + ((2.0 + 8.0) / (5.0 / (6.0 * 13.0))))
//        (7.0 + (13.0 * (8.0 + ((2.0 * 5.0) - 6.0))))
//        ((8.0 * (7.0 + ((5.0 * 6.0) / 2.0))) - 13.0)
//        ((13.0 * (2.0 + 7.0)) + (6.0 + (5.0 * 8.0)))
//        (((8.0 - 5.0) * (13.0 + (6.0 * 7.0))) - 2.0)
//        ((6.0 * (2.0 + 7.0)) + (5.0 + (8.0 * 13.0)))
//        (((6.0 + 13.0) * ((2.0 * 7.0) - 5.0)) - 8.0)
//        ((((2.0 * (7.0 * 13.0)) - 5.0) - 6.0) - 8.0)
//        ((8.0 * (5.0 + 13.0)) + (7.0 + (2.0 * 6.0)))
//        ((8.0 + ((2.0 + 6.0) * (7.0 + 13.0))) - 5.0)
//        ((((2.0 * 7.0) - 5.0) * (6.0 + 13.0)) - 8.0)
//        ((((2.0 * 7.0) * (5.0 + 8.0)) - 13.0) - 6.0)
//        (7.0 + (6.0 * (13.0 / (5.0 / (2.0 + 8.0)))))
//        ((5.0 * (7.0 + (13.0 * (8.0 - 6.0)))) - 2.0)
//        (7.0 + (13.0 * ((6.0 - 2.0) * (8.0 - 5.0))))
//        (7.0 + ((6.0 / (5.0 / 13.0)) * (2.0 + 8.0)))
//        (13.0 + ((8.0 + (6.0 * 7.0)) * (5.0 - 2.0)))
//        (2.0 + ((7.0 * 13.0) + (5.0 * (6.0 + 8.0))))
//        (7.0 + ((2.0 + 8.0) * ((6.0 * 13.0) / 5.0)))
//        (((13.0 * (2.0 * 7.0)) - (5.0 + 6.0)) - 8.0)
//        ((7.0 * (2.0 * 13.0)) - (8.0 + (5.0 + 6.0)))
//        (((2.0 * (7.0 * 13.0)) - 5.0) - (6.0 + 8.0))
//        (((13.0 * (2.0 * 7.0)) - 5.0) - (6.0 + 8.0))
//        ((5.0 * (8.0 - 2.0)) + (7.0 * (6.0 + 13.0)))
//        (((2.0 * (7.0 * 13.0)) - (5.0 + 8.0)) - 6.0)
//        (7.0 + ((13.0 * (6.0 / 5.0)) * (2.0 + 8.0)))
//        (6.0 + ((2.0 + (8.0 * (7.0 + 13.0))) - 5.0))
//        ((7.0 * (6.0 + ((2.0 * 13.0) - 8.0))) - 5.0)
//        (((13.0 * (6.0 + 8.0)) - 5.0) - (2.0 * 7.0))
//        ((6.0 * ((5.0 * 7.0) - (13.0 / 2.0))) - 8.0)
//        (2.0 + (6.0 + ((8.0 * (7.0 + 13.0)) - 5.0)))
//        ((13.0 * (6.0 + 7.0)) - (2.0 * (8.0 - 5.0)))
//        ((2.0 * ((6.0 + 8.0) * (13.0 - 7.0))) - 5.0)
//        ((6.0 + (2.0 + (8.0 * (7.0 + 13.0)))) - 5.0)
//        ((((2.0 * 7.0) - 6.0) * (8.0 + 13.0)) - 5.0)
//        ((7.0 * (8.0 + (13.0 + (6.0 / 2.0)))) - 5.0)
//        (7.0 + ((2.0 + 8.0) * (6.0 * (13.0 / 5.0))))
//        (((13.0 * (7.0 + 8.0)) - 2.0) - (5.0 * 6.0))
//        ((13.0 * (2.0 * 7.0)) - (8.0 + (5.0 + 6.0)))
//        (7.0 + (((6.0 * 13.0) / 5.0) * (2.0 + 8.0)))
//        (7.0 + ((6.0 * (13.0 * (2.0 + 8.0))) / 5.0))
//        ((5.0 * 7.0) + (2.0 + (6.0 * (8.0 + 13.0))))
//        (8.0 + (((7.0 + 13.0) * (2.0 + 6.0)) - 5.0))
//        (((7.0 + 13.0) * (2.0 + 6.0)) + (8.0 - 5.0))
//        ((5.0 + 8.0) * ((7.0 / 13.0) + (2.0 * 6.0)))
//        (7.0 + ((13.0 * (8.0 - 5.0)) * (6.0 - 2.0)))
//        (((8.0 + (7.0 / 6.0)) * (5.0 + 13.0)) - 2.0)
//        (5.0 + (6.0 + (8.0 * ((2.0 * 13.0) - 7.0))))
//        (7.0 + ((2.0 + 8.0) * (13.0 * (6.0 / 5.0))))
//        (7.0 + (((2.0 + 8.0) * (6.0 * 13.0)) / 5.0))
//        (((7.0 * (2.0 * 13.0)) - 5.0) - (6.0 + 8.0))
//        ((7.0 * 13.0) + (8.0 * ((5.0 + 6.0) - 2.0)))
//        ((2.0 * (6.0 * (8.0 + (13.0 - 7.0)))) - 5.0)
//        (7.0 + ((6.0 * (13.0 / 5.0)) * (2.0 + 8.0)))
//        ((((5.0 + 8.0) * (2.0 * 7.0)) - 13.0) - 6.0)
//        (5.0 + ((8.0 * 13.0) + (6.0 * (2.0 + 7.0))))
//        ((8.0 * ((2.0 * 13.0) - 7.0)) + (5.0 + 6.0))
//        ((13.0 * (6.0 + 8.0)) - (5.0 + (2.0 * 7.0)))
//        (7.0 + ((6.0 * 13.0) * ((2.0 + 8.0) / 5.0)))
//        (2.0 + ((6.0 - 5.0) + (8.0 * (7.0 + 13.0))))
//        ((6.0 * (8.0 + 13.0)) + (2.0 + (5.0 * 7.0)))
//        ((8.0 + ((7.0 + 13.0) * (2.0 + 6.0))) - 5.0)
//        (((5.0 + 13.0) * (6.0 + (7.0 / 2.0))) - 8.0)
//        (7.0 + (6.0 * ((2.0 + 8.0) * (13.0 / 5.0))))
//        ((7.0 * (2.0 * 13.0)) - (5.0 + (6.0 + 8.0)))
//        ((8.0 * 13.0) + (5.0 + (6.0 * (2.0 + 7.0))))
//        (7.0 + (6.0 * ((2.0 + 8.0) / (5.0 / 13.0))))
//        (7.0 + ((13.0 / 5.0) * (6.0 * (2.0 + 8.0))))
//        ((2.0 + (6.0 * (8.0 + 13.0))) + (5.0 * 7.0))
//        (6.0 + ((2.0 * 5.0) + (7.0 * (8.0 + 13.0))))
//        (13.0 + (6.0 * (8.0 + (7.0 + (2.0 * 5.0)))))
//        (((13.0 * (2.0 * 7.0)) - 6.0) - (5.0 + 8.0))
//        ((7.0 * ((6.0 / 2.0) + (8.0 + 13.0))) - 5.0)
//        ((5.0 + 6.0) + (8.0 * ((2.0 * 13.0) - 7.0)))
//        (((2.0 * 6.0) * (8.0 + (13.0 - 7.0))) - 5.0)
//        (((6.0 + (7.0 / 2.0)) * (5.0 + 13.0)) - 8.0)
//        ((((5.0 + 8.0) * (2.0 * 7.0)) - 6.0) - 13.0)
//        (((2.0 * (6.0 + 8.0)) * (13.0 - 7.0)) - 5.0)
//        ((6.0 * (2.0 * (13.0 + (8.0 - 7.0)))) - 5.0)
//        ((2.0 + 6.0) + ((8.0 * (7.0 + 13.0)) - 5.0))
//        ((13.0 * ((5.0 / (2.0 / 8.0)) - 7.0)) - 6.0)
//        (((7.0 * (2.0 * 13.0)) - 6.0) - (5.0 + 8.0))
//        ((((2.0 * (7.0 * 13.0)) - 5.0) - 8.0) - 6.0)
//        (13.0 + (6.0 * (7.0 + (8.0 + (2.0 * 5.0)))))
//        ((5.0 + (6.0 * (2.0 + 7.0))) + (8.0 * 13.0))
//        (((2.0 * 6.0) * ((8.0 + 13.0) - 7.0)) - 5.0)
//        ((((7.0 * (2.0 * 13.0)) - 5.0) - 6.0) - 8.0)
//        (7.0 + ((13.0 * (2.0 + 8.0)) / (5.0 / 6.0)))
//        ((6.0 * 13.0) + (5.0 * (2.0 + (7.0 + 8.0))))
//        ((2.0 * (6.0 * (13.0 + (8.0 - 7.0)))) - 5.0)
//        (7.0 + ((6.0 * 13.0) * ((2.0 * 5.0) - 8.0)))
//        ((13.0 * (7.0 + 8.0)) - (2.0 + (5.0 * 6.0)))
//        ((8.0 * (5.0 * 6.0)) - (7.0 * (13.0 - 2.0)))
//        ((((7.0 * (2.0 * 13.0)) - 8.0) - 5.0) - 6.0)
//        ((2.0 + (8.0 * (7.0 + 13.0))) + (6.0 - 5.0))
//        (((8.0 * (7.0 + 13.0)) + (2.0 + 6.0)) - 5.0)
//        (((2.0 + 6.0) - 5.0) + (8.0 * (7.0 + 13.0)))
//        (7.0 + ((2.0 + 8.0) * (13.0 / (5.0 / 6.0))))
//        ((5.0 * (6.0 + 8.0)) + (2.0 + (7.0 * 13.0)))
//        ((2.0 * ((13.0 - 7.0) * (6.0 + 8.0))) - 5.0)
//        ((8.0 * (5.0 + (6.0 - 2.0))) + (7.0 * 13.0))
//        (((2.0 * (7.0 * 13.0)) - 8.0) - (5.0 + 6.0))
//        ((8.0 * ((5.0 + 6.0) - 2.0)) + (7.0 * 13.0))
//        ((2.0 + (7.0 * 13.0)) + (5.0 * (6.0 + 8.0)))
//        (((13.0 * (2.0 * 7.0)) - 8.0) - (5.0 + 6.0))
//        ((13.0 * (2.0 * 7.0)) - (5.0 + (6.0 + 8.0)))
//        (13.0 * ((7.0 / (5.0 + 8.0)) + (2.0 * 6.0)))
//        (13.0 + (6.0 * ((2.0 * 5.0) + (7.0 + 8.0))))
//        (((2.0 * (7.0 * (5.0 + 8.0))) - 6.0) - 13.0)
//        ((5.0 * 6.0) + (7.0 * ((8.0 + 13.0) - 2.0)))
//        (((7.0 * (2.0 * (5.0 + 8.0))) - 6.0) - 13.0)
//        ((7.0 * (8.0 + 13.0)) + (6.0 + (2.0 * 5.0)))
//        ((5.0 * 7.0) + (8.0 * (13.0 + (6.0 / 2.0))))
//        ((((2.0 * 7.0) * (5.0 + 8.0)) - 6.0) - 13.0)
//        (7.0 + ((2.0 + 8.0) * (6.0 / (5.0 / 13.0))))
//        (7.0 + ((6.0 * 13.0) / (5.0 / (2.0 + 8.0))))
//        (7.0 + ((8.0 * (5.0 + 13.0)) + (2.0 * 6.0)))
//        ((7.0 * ((6.0 + (2.0 * 13.0)) - 8.0)) - 5.0)
//        ((13.0 * ((8.0 / (2.0 / 5.0)) - 7.0)) - 6.0)
//        (2.0 + (7.0 * (13.0 + (5.0 * (8.0 - 6.0)))))
//        ((13.0 * (7.0 + (2.0 * (8.0 - 5.0)))) - 6.0)
//        (7.0 + ((13.0 * (2.0 + 8.0)) * (6.0 / 5.0)))
//        ((((5.0 * 6.0) - 13.0) * (2.0 + 8.0)) - 7.0)
//        (13.0 + ((5.0 - 2.0) * ((7.0 * 8.0) - 6.0)))
//        (7.0 + (6.0 * ((13.0 * (2.0 + 8.0)) / 5.0)))
//        (((8.0 * (7.0 + 13.0)) - 5.0) + (2.0 + 6.0))
//        (6.0 + ((5.0 * 8.0) + (13.0 * (2.0 + 7.0))))
//        ((7.0 * (13.0 + (2.0 * 5.0))) + (8.0 - 6.0))
//        (((5.0 * 7.0) * (13.0 - 8.0)) - (2.0 * 6.0))
//        (7.0 + (6.0 / ((5.0 / (2.0 + 8.0)) / 13.0)))
//        ((7.0 * 13.0) + (8.0 * (6.0 + (5.0 - 2.0))))
//        ((8.0 - 5.0) + ((7.0 + 13.0) * (2.0 + 6.0)))
//        (6.0 + ((13.0 * (2.0 + 7.0)) + (5.0 * 8.0)))
//        (6.0 + (2.0 + ((8.0 * (7.0 + 13.0)) - 5.0)))
//        ((8.0 * (7.0 + (6.0 * (5.0 / 2.0)))) - 13.0)
//        (7.0 + (13.0 * ((2.0 + 8.0) / (5.0 / 6.0))))
//        (6.0 + (5.0 + (8.0 * ((2.0 * 13.0) - 7.0))))
//        (7.0 + (13.0 * ((8.0 + (2.0 * 5.0)) - 6.0)))
//        ((((13.0 * (2.0 * 7.0)) - 5.0) - 6.0) - 8.0)
//        ((7.0 * 13.0) + (2.0 + (5.0 * (6.0 + 8.0))))
//        (5.0 + (2.0 * ((8.0 - 7.0) + (6.0 * 13.0))))
//        (((6.0 + 8.0) * (2.0 * (13.0 - 7.0))) - 5.0)
//        (((2.0 * 7.0) * (5.0 + 8.0)) - (6.0 + 13.0))
//        ((((13.0 * (2.0 * 7.0)) - 6.0) - 5.0) - 8.0)
//        ((2.0 * (7.0 * (5.0 + 8.0))) - (6.0 + 13.0))
//        ((2.0 + (6.0 + (8.0 * (7.0 + 13.0)))) - 5.0)
//        ((2.0 + (5.0 * (6.0 + 8.0))) + (7.0 * 13.0))
//        (7.0 + (6.0 / ((5.0 / 13.0) / (2.0 + 8.0))))
//        ((8.0 * (7.0 + 13.0)) + ((2.0 + 6.0) - 5.0))
//        ((6.0 + (2.0 * 5.0)) + (7.0 * (8.0 + 13.0)))
//        (((13.0 * (2.0 * 7.0)) - (5.0 + 8.0)) - 6.0)
//        (((7.0 / 13.0) + (2.0 * 6.0)) * (5.0 + 8.0))
//        (13.0 + (6.0 * (((5.0 * 7.0) - 2.0) - 8.0)))
//        ((7.0 * (2.0 * (5.0 + 8.0))) - (6.0 + 13.0))
//        ((6.0 + (5.0 * (7.0 + (2.0 * 13.0)))) - 8.0)
//        (7.0 + (13.0 * ((8.0 - 5.0) * (6.0 - 2.0))))
//        (((2.0 + 6.0) + (8.0 * (7.0 + 13.0))) - 5.0)
//        (13.0 + ((5.0 - 2.0) * (8.0 + (6.0 * 7.0))))
//        (7.0 + (13.0 * ((2.0 + 8.0) * (6.0 / 5.0))))
//        (((13.0 + (8.0 - 7.0)) * (2.0 * 6.0)) - 5.0)
//        (((5.0 + 8.0) * (2.0 * 7.0)) - (6.0 + 13.0))
//        (7.0 + (((6.0 * 13.0) * (2.0 + 8.0)) / 5.0))
//        ((8.0 * (6.0 + (5.0 - 2.0))) + (7.0 * 13.0))
//        ((6.0 * (2.0 * (8.0 + (13.0 - 7.0)))) - 5.0)
//        ((8.0 * (7.0 + (5.0 * (6.0 / 2.0)))) - 13.0)
//        ((6.0 + (13.0 * (2.0 + 7.0))) + (5.0 * 8.0))
//        ((5.0 * (8.0 + (2.0 + 7.0))) + (6.0 * 13.0))
//        ((((13.0 * (2.0 * 7.0)) - 8.0) - 5.0) - 6.0)
//        ((((2.0 * (7.0 * 13.0)) - 8.0) - 6.0) - 5.0)
//        ((6.0 - 5.0) + (2.0 + (8.0 * (7.0 + 13.0))))
//        ((((13.0 * (2.0 * 7.0)) - 8.0) - 6.0) - 5.0)
//        ((6.0 * (2.0 * ((8.0 + 13.0) - 7.0))) - 5.0)
//        ((6.0 * 13.0) + (5.0 * (8.0 + (2.0 + 7.0))))
//        (8.0 + (((2.0 + 6.0) * (7.0 + 13.0)) - 5.0))
//        (6.0 + ((7.0 * (8.0 + 13.0)) + (2.0 * 5.0)))
//        ((2.0 + (5.0 * 7.0)) + (6.0 * (8.0 + 13.0)))
//        ((6.0 + (8.0 * (7.0 + 13.0))) - (5.0 - 2.0))
//        ((7.0 + (8.0 * (5.0 + 13.0))) + (2.0 * 6.0))
//        ((8.0 * (7.0 + 13.0)) + (6.0 - (5.0 - 2.0)))
//        ((8.0 * (13.0 + ((2.0 * 7.0) - 6.0))) - 5.0)
//        (13.0 + (6.0 * ((2.0 * (7.0 + 8.0)) - 5.0)))
//        ((7.0 + (2.0 * 6.0)) + (8.0 * (5.0 + 13.0)))
//        (5.0 + (2.0 * ((6.0 * 13.0) + (8.0 - 7.0))))
//        ((7.0 * ((8.0 + 13.0) + (6.0 / 2.0))) - 5.0)
//        (7.0 + (13.0 * ((6.0 / 5.0) * (2.0 + 8.0))))
//        (((6.0 + 8.0) / 2.0) + (13.0 * (5.0 + 7.0)))
//        ((8.0 - 5.0) + ((2.0 + 6.0) * (7.0 + 13.0)))
//        (((13.0 - 7.0) * (2.0 * (6.0 + 8.0))) - 5.0)
//        ((((2.0 * (7.0 * 13.0)) - 6.0) - 5.0) - 8.0)
//        (7.0 + (((2.0 + 8.0) / 5.0) * (6.0 * 13.0)))
//        (13.0 * ((2.0 * 6.0) + (7.0 / (5.0 + 8.0))))
//        (7.0 + (13.0 * (6.0 / (5.0 / (2.0 + 8.0)))))
//        (7.0 + (13.0 * ((8.0 - 6.0) + (2.0 * 5.0))))
//        ((6.0 + (7.0 * (8.0 + 13.0))) + (2.0 * 5.0))
//        (((13.0 - 8.0) * (5.0 * 7.0)) - (2.0 * 6.0))
//        ((((13.0 * (2.0 * 7.0)) - 6.0) - 8.0) - 5.0)
//        (7.0 + ((6.0 * (2.0 + 8.0)) * (13.0 / 5.0)))
//        (((7.0 * (2.0 * 13.0)) - (5.0 + 8.0)) - 6.0)
//        ((2.0 * (7.0 * 13.0)) - (5.0 + (6.0 + 8.0)))
//        (2.0 + ((8.0 * (7.0 + 13.0)) + (6.0 - 5.0)))
//        (7.0 + (13.0 * (6.0 * ((2.0 * 5.0) - 8.0))))
//        ((8.0 * (7.0 + (5.0 / (2.0 / 6.0)))) - 13.0)
//        (7.0 + ((13.0 * (6.0 * (2.0 + 8.0))) / 5.0))
//        ((2.0 * 5.0) + (6.0 + (7.0 * (8.0 + 13.0))))
//        (((2.0 * (7.0 * 13.0)) - (5.0 + 6.0)) - 8.0)
//        ((5.0 * 6.0) + (7.0 * (13.0 + (8.0 - 2.0))))
//        (((2.0 * (7.0 * (5.0 + 8.0))) - 13.0) - 6.0)
//        ((8.0 * ((13.0 + (2.0 * 7.0)) - 6.0)) - 5.0)
//        ((5.0 * (6.0 * 8.0)) - (7.0 * (13.0 - 2.0)))
//        (((7.0 * (2.0 * (5.0 + 8.0))) - 13.0) - 6.0)
//        (7.0 + (13.0 * (6.0 * ((2.0 + 8.0) / 5.0))))
//        ((8.0 - 6.0) + (7.0 * (13.0 + (2.0 * 5.0))))
//        (((8.0 + 13.0) * ((2.0 * 7.0) - 6.0)) - 5.0)
//        (8.0 + (5.0 * ((2.0 * (6.0 + 13.0)) - 7.0)))
//        (((7.0 * (2.0 * 13.0)) - (5.0 + 6.0)) - 8.0)
//        (7.0 + (13.0 * (2.0 + (5.0 * (8.0 - 6.0)))))
//        ((5.0 + 8.0) * ((2.0 * 6.0) + (7.0 / 13.0)))
//        (((13.0 + (6.0 * 7.0)) * (8.0 - 5.0)) - 2.0)
//        (5.0 + (2.0 * ((8.0 + (6.0 * 13.0)) - 7.0)))
//        (6.0 + ((8.0 * (7.0 + 13.0)) - (5.0 - 2.0)))
//        ((13.0 * ((8.0 * (5.0 / 2.0)) - 7.0)) - 6.0)
//        (13.0 + (((7.0 * 8.0) - 6.0) * (5.0 - 2.0)))
//        ((7.0 * 13.0) + (8.0 * (5.0 + (6.0 - 2.0))))
//        ((2.0 * (6.0 * ((8.0 + 13.0) - 7.0))) - 5.0)
//        (7.0 + (13.0 * ((2.0 * 5.0) + (8.0 - 6.0))))
//        (13.0 + (6.0 * ((7.0 + 8.0) + (2.0 * 5.0))))
//        (8.0 + (5.0 * ((6.0 * 7.0) - (13.0 - 2.0))))
//        (8.0 + (5.0 * ((2.0 + (6.0 * 7.0)) - 13.0)))
//        ((((7.0 * (2.0 * 13.0)) - 5.0) - 8.0) - 6.0)
//        ((7.0 * ((8.0 + 13.0) - 2.0)) + (5.0 * 6.0))
//        ((((7.0 * (2.0 * 13.0)) - 6.0) - 5.0) - 8.0)
//        (5.0 + ((6.0 * (2.0 + 7.0)) + (8.0 * 13.0)))
//        (7.0 + ((8.0 - 5.0) * (13.0 * (6.0 - 2.0))))
//        (((2.0 + 8.0) * ((5.0 * 6.0) - 13.0)) - 7.0)
//        ((6.0 * 13.0) + (5.0 * (7.0 + (2.0 + 8.0))))
//        (8.0 + (5.0 * (2.0 + ((6.0 * 7.0) - 13.0))))
//        (5.0 + (2.0 * (8.0 + ((6.0 * 13.0) - 7.0))))
//        ((13.0 * (((5.0 * 8.0) / 2.0) - 7.0)) - 6.0)
//        ((6.0 - (5.0 - 2.0)) + (8.0 * (7.0 + 13.0)))
//        ((8.0 + (7.0 * (13.0 + (2.0 * 5.0)))) - 6.0)
//        (((13.0 * (6.0 + 8.0)) - (2.0 * 7.0)) - 5.0)
//        ((7.0 * ((2.0 * 13.0) - (8.0 - 6.0))) - 5.0)
//        (((13.0 * (7.0 + 8.0)) - (5.0 * 6.0)) - 2.0)
//        (2.0 + ((6.0 + (8.0 * (7.0 + 13.0))) - 5.0))
//        (((8.0 + (13.0 - 7.0)) * (2.0 * 6.0)) - 5.0)
//        ((2.0 + (6.0 - 5.0)) + (8.0 * (7.0 + 13.0)))
//        (((5.0 + 7.0) * (13.0 + (6.0 / 8.0))) - 2.0)
//        (((7.0 * (2.0 * 13.0)) - (6.0 + 8.0)) - 5.0)
//        ((7.0 * (5.0 * (13.0 - 8.0))) - (2.0 * 6.0))
//        ((7.0 * (6.0 + 13.0)) + (5.0 * (8.0 - 2.0)))
//        ((2.0 * (7.0 * 13.0)) - (8.0 + (5.0 + 6.0)))
//        (((13.0 + (6.0 / 8.0)) * (5.0 + 7.0)) - 2.0)
//        (7.0 + ((6.0 - 2.0) * (13.0 * (8.0 - 5.0))))
//        (7.0 + (13.0 * ((5.0 * (6.0 - 2.0)) - 8.0)))
//        ((((2.0 * (7.0 * 13.0)) - 8.0) - 5.0) - 6.0)
//        (8.0 + ((7.0 * (13.0 + (2.0 * 5.0))) - 6.0))
//        (7.0 + ((13.0 * (6.0 - 2.0)) * (8.0 - 5.0)))
//        (2.0 + ((6.0 * (8.0 + 13.0)) + (5.0 * 7.0)))
//        ((((8.0 + 13.0) - 7.0) * (2.0 * 6.0)) - 5.0)
//        (2.0 + ((5.0 * 7.0) + (6.0 * (8.0 + 13.0))))
//        (((2.0 * (7.0 * 13.0)) - (6.0 + 8.0)) - 5.0)
//        ((6.0 + (5.0 * 8.0)) + (13.0 * (2.0 + 7.0)))
//        (7.0 + (13.0 * (5.0 + ((6.0 + 8.0) / 2.0))))
//        (((2.0 * 6.0) * (13.0 + (8.0 - 7.0))) - 5.0)
//        ((((7.0 * (2.0 * 13.0)) - 8.0) - 6.0) - 5.0)
//        ((2.0 * (7.0 * 13.0)) - (6.0 + (5.0 + 8.0)))
//        (7.0 + (13.0 * (6.0 + (2.0 * (8.0 - 5.0)))))
//        ((((7.0 * (2.0 * 13.0)) - 6.0) - 8.0) - 5.0)
//        (13.0 + (6.0 * (((5.0 * 7.0) - 8.0) - 2.0)))
//        ((8.0 * (7.0 + (2.0 * (13.0 - 6.0)))) - 5.0)
//        (7.0 + (13.0 / (5.0 / (6.0 * (2.0 + 8.0)))))
//        (((13.0 * (2.0 * 7.0)) - (6.0 + 8.0)) - 5.0)
//        ((8.0 * (7.0 + (6.0 / (2.0 / 5.0)))) - 13.0)
//        (7.0 + (((2.0 * 5.0) - 8.0) * (6.0 * 13.0)))
//        ((5.0 * (7.0 * (13.0 - 8.0))) - (2.0 * 6.0))
//        ((5.0 + (8.0 * 13.0)) + (6.0 * (2.0 + 7.0)))
//        ((2.0 * 6.0) + (7.0 + (8.0 * (5.0 + 13.0))))
//        (7.0 + ((6.0 * (2.0 + 8.0)) / (5.0 / 13.0)))
//        (7.0 + (13.0 / ((5.0 / (2.0 + 8.0)) / 6.0)))
//        (7.0 + ((13.0 / (5.0 / 6.0)) * (2.0 + 8.0)))
//        (7.0 + (6.0 / (5.0 / (13.0 * (2.0 + 8.0)))))
//        (2.0 + ((5.0 * (6.0 + 8.0)) + (7.0 * 13.0)))
//        ((7.0 * (13.0 + (8.0 - 2.0))) + (5.0 * 6.0))
//        ((13.0 * (5.0 + 7.0)) + ((6.0 + 8.0) / 2.0))
//
//        (1656.2027 milliseconds elapsed)
